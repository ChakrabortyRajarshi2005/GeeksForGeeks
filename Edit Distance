Edit Distance
Difficulty: HardAccuracy: 35.14%Submissions: 223K+Points: 8
Given two strings s1 and s2. Return the minimum number of operations required to convert s1 to s2.
The possible operations are permitted:

Insert a character at any position of the string.
Remove any character from the string.
Replace any character from the string with any other character.
Examples:

Input: s1 = "geek", s2 = "gesek"
Output: 1
Explanation: One operation is required, inserting 's' between two 'e'.
Input : s1 = "gfg", s2 = "gfg"
Output: 0
Explanation: Both strings are same.
Input : s1 = "abc", s2 = "def"
Output: 3
Explanation: All characters need to be replaced to convert str1 to str2, requiring 3 replacement operations.
Constraints:
1 ≤ s1.length(), s2.length() ≤ 500
both the strings are in lowercase.

class Solution {
    static int dp[][];

    static int min(int x, int y, int z) {
        if (x <= y && x <= z) return x;
        if (y <= x && y <= z)
            return y;
        else
            return z;
    }

    static int fun(String s, String t, int pos1, int pos2) {
        if (pos1 == 0) return pos2;
        if (pos2 == 0) return pos1;
        if (dp[pos1][pos2] != -1) return dp[pos1][pos2];
        if (s.charAt(pos1 - 1) == t.charAt(pos2 - 1))
            return dp[pos1][pos2] = fun(s, t, pos1 - 1, pos2 - 1);
        return dp[pos1][pos2] =
                   min(1 + fun(s, t, pos1, pos2 - 1), 1 + fun(s, t, pos1 - 1, pos2),
                       1 + fun(s, t, pos1 - 1, pos2 - 1));
    }

    public int editDistance(String s, String t) {
        dp = new int[s.length() + 1][t.length() + 1];
        for (int i = 0; i <= s.length(); i++)
            for (int j = 0; j <= t.length(); j++) dp[i][j] = -1;

        int ans = fun(s, t, s.length(), t.length());
        return ans;
    }
}
