B. Vanya and Lanterns
time limit per test1 second
memory limit per test256 megabytes
Vanya walks late at night along a straight street of length l, lit by n lanterns. Consider the coordinate system with the beginning of the street corresponding to the point 0, and its end corresponding to the point l. Then the i-th lantern is at the point ai. The lantern lights all points of the street that are at the distance of at most d from it, where d is some positive number, common for all lanterns.

Vanya wonders: what is the minimum light radius d should the lanterns have to light the whole street?

Input
The first line contains two integers n, l (1 ≤ n ≤ 1000, 1 ≤ l ≤ 109) — the number of lanterns and the length of the street respectively.

The next line contains n integers ai (0 ≤ ai ≤ l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.

Output
Print the minimum light radius d, needed to light the whole street. The answer will be considered correct if its absolute or relative error doesn't exceed 10 - 9.

Examples
InputCopy
7 15
15 5 3 7 9 14 0
OutputCopy
2.5000000000
InputCopy
2 5
2 5
OutputCopy
2.0000000000
Note
Consider the second sample. At d = 2 the first lantern will light the segment [0, 4] of the street, and the second lantern will light segment [3, 5]. Thus, the whole street will be lit.


Codeforces (c) Copyright 2010-2025 Mike Mirzayanov
The only programming contests Web 2.0 platform
Server time: Mar/13/2025 23:55:39UTC+5.5 (k2).
Desktop version, switch to mobile version.
Privacy Policy
Supported by
def minimum_light_radius(n, l, positions):
    # Sort the lantern positions
    positions.sort()
    
    # Find the maximum gap between consecutive lanterns
    max_gap = 0
    for i in range(1, n):
        max_gap = max(max_gap, positions[i] - positions[i - 1])
    
    # Maximum distance to cover the ends of the street
    start_distance = positions[0]
    end_distance = l - positions[-1]
    
    # The minimum radius needed
    d = max(max_gap / 2, start_distance, end_distance)
    
    return f"{d:.9f}"

# Example usage:
n1, l1 = 7, 15
positions1 = [15, 5, 3, 7, 9, 14, 0]
print(minimum_light_radius(n1, l1, positions1))  # Output: 2.500000000

n2, l2 = 2, 5
positions2 = [2, 5]
print(minimum_light_radius(n2, l2, positions2))  # Output: 2.000000000
