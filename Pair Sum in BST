Pair Sum in BST
Difficulty: MediumAccuracy: 44.02%Submissions: 76K+Points: 4Average Time: 40m
Given a Binary Search Tree(BST) and a target. Check whether there's a pair of Nodes in the BST with value summing up to the target. 

Examples:

Input: root = [7, 3, 8, 2, 4, N, 9], target = 12
       bst
Output: True
Explanation: In the binary tree above, there are two nodes (8 and 4) that add up to 12.
Input: root = [9, 5, 10, 2, 6, N, 12], target = 23
          bst-3
Output: False
Explanation: In the binary tree above, there are no such two nodes exists that add up to 23.
Constraints:

1 ≤ Number of Nodes ≤ 105
1 ≤ target ≤ 106


class Solution {
  public:
    void inorderTraversal(Node* root, vector<int>& inorder) {
        if (root == nullptr)
            return;

        inorderTraversal(root->left, inorder);
        inorder.push_back(root->data);
        inorderTraversal(root->right, inorder);
    }

    bool findTarget(Node* root, int target) {
        vector<int> inorder;
        inorderTraversal(root, inorder);

        int left = 0, right = inorder.size() - 1;

        while (left < right) {
            int currentSum = inorder[left] + inorder[right];

            if (currentSum == target)
                return true;

            if (currentSum < target)
                left++;
            else
                right--;
        }

        return false;
    }
};
