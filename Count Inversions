Count Inversions
Difficulty: MediumAccuracy: 16.93%Submissions: 595K+Points: 4
Given an array of integers arr[]. Find the Inversion Count in the array.
Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).
Input: arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.
Input: arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.
Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i] ≤ 104
class Solution {
    static int inversionCount(int arr[]) {
        int n = arr.length;
        int temporary[] = new int[n];
        return _mergeSort(arr, temporary, 0, n - 1);
    }

    static int _mergeSort(int arr[], int temporary[], int left, int right) {
        int midium, count = 0;
        if (right > left) {
            midium = (right + left) / 2;
            count = _mergeSort(arr, temporary, left, midium);
            count += _mergeSort(arr, temporary, midium + 1, right);
            count += merge(arr, temporary, left, midium + 1, right);
        }
        return count;
    }

    static int merge(int arr[], int temporary[], int left, int midium, int right) {
        int i = left, j = midium, k = left, count = 0;
        while ((i <= midium - 1) && (j <= right)) {
            if (arr[i] <= arr[j]) {
                temporary[k++] = arr[i++];
            } else {
                temporary[k++] = arr[j++];
                count += (midium - i);
            }
        }
        while (i <= midium - 1) temporary[k++] = arr[i++];
        while (j <= right) temporary[k++] = arr[j++];
        for (i = left; i <= right; i++) arr[i] = temporary[i];
        return count;
    }
}
