
Longest Bounded-Difference Subarray
Difficulty: MediumAccuracy: 65.26%Submissions: 9K+Points: 4
Given an array of positive integers arr[] and a non-negative integer x, the task is to find the longest sub-array where the absolute difference between any two elements is not greater than x.
If multiple such subarrays exist, return the one that starts at the smallest index.

Examples: 

Input: arr[] = [8, 4, 2, 6, 7], x = 4 
Output: [4, 2, 6] 
Explanation: The sub-array described by index [1..3], i.e. [4, 2, 6] contains no such difference of two elements which is greater than 4.
Input: arr[] = [15, 10, 1, 2, 4, 7, 2], x = 5 
Output: [2, 4, 7, 2] 
Explanation: The sub-array described by indexes [3..6], i.e. [2, 4, 7, 2] contains no such difference of two elements which is greater than 5. 
Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 109
0 <= x<= 109

class Solution {
  public:
    vector<int> longestSubarray(vector<int>& arr, int x) {
        priority_queue<pair<int,int>>mh;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>minh;
        int i=0,j=0;
        vector<int>ans;
        int n=arr.size();
        while(j<n){
            mh.push({arr[j],j});
            minh.push({arr[j],j});
            while((mh.top().first-minh.top().first)>x){
                i=min(mh.top().second,minh.top().second)+1;
                while(mh.top().second<i){
                    mh.pop();
                }
                while(minh.top().second<i){
                    minh.pop();
                }
            }
            vector<int>res(arr.begin()+i,arr.begin()+j+1);
            if(res.size()>ans.size()){
                ans=res;
            }
            j++;
        }
        
        return ans;
    }
};
