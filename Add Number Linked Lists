Add Number Linked Lists
Difficulty: MediumAccuracy: 34.52%Submissions: 314K+Points: 4
Given the head of two singly linked lists num1 and num2 representing two non-negative integers. The task is to return the head of the linked list representing the sum of these two numbers.

For example, num1 represented by the linked list : 1 -> 9 -> 0, similarly num2 represented by the linked list: 2 -> 5. Sum of these two numbers is represented by 2 -> 1 -> 5.

Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.

Examples:

Input: num1 = 4 - > 5, num2 = 3 -> 4 -> 5
Output:  3 -> 9 -> 0
 
Explanation: Given numbers are 45 and 345. There sum is 390.
Input: num1 = 0 -> 0 -> 6 -> 3, num2 = 0 -> 7 
Output: 7 -> 0 
 
Explanation: Given numbers are 63 and 7. There sum is 70.
Constraints:
1 <= size of both linked lists <= 106
0 <= elements of both linked lists <= 9
class Solution {
    static Node reverse(Node head) {
        Node previous = null;
        Node current = head;
        Node next_node = null;

        while (current != null) {
            next_node = current.next;
            current.next = previous;
            previous = current;
            current = next_node;
        }

        return previous;
    }

    static Node addTwoLists(Node num1, Node num2) {
        num1 = reverse(num1);
        num2 = reverse(num2);

        Node sum = null;
        int carry = 0;

        while (num1 != null || num2 != null || carry > 0) {
            int newVal = carry;

            if (num1 != null) newVal += num1.data;
            if (num2 != null) newVal += num2.data;

            carry = newVal / 10;
            newVal = newVal % 10;

            Node newNode = new Node(newVal);
            newNode.next = sum;
            sum = newNode;

            if (num1 != null) num1 = num1.next;
            if (num2 != null) num2 = num2.next;
        }
        
        while (sum != null && sum.data == 0) {
            Node temp = sum.next;
            sum.next = null;
            sum = temp;
        }
        if (sum == null) return new Node(0);
        return sum;
    }
}
