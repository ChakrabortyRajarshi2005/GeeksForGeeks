
Parenthesis Checker
Difficulty: EasyAccuracy: 28.56%Submissions: 640K+Points: 2
Given a string s, composed of different combinations of '(' , ')', '{', '}', '[', ']', verify the validity of the arrangement.
An input string is valid if:

         1. Open brackets must be closed by the same type of brackets.
         2. Open brackets must be closed in the correct order.

Examples :

Input: s = "[{()}]"
Output: true
Explanation: All the brackets are well-formed.
Input: s = "[()()]{}"
Output: true
Explanation: All the brackets are well-formed.
Input: s = "([]"
Output: False
Explanation: The expression is not balanced as there is a missing ')' at the end.
Input: s = "([{]})"
Output: False
Explanation: The expression is not balanced as there is a closing ']' before the closing '}'.
Constraints:
1 ≤ s.size() ≤ 106
s[i] ∈ {'{', '}', '(', ')', '[', ']'}


class Solution {
    static boolean isBalanced(String s) {
        // code here
        
        Stack<Character>st=new Stack<>();
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(ch=='(' || ch=='{' || ch=='['){
                st.push(ch);
            }
            else if(st.isEmpty() || (ch==')' && st.peek()!='(')){
                return false;
            }
            else if(st.isEmpty() || (ch=='}' && st.peek()!='{')){
                return false;
            }
            else if( st.isEmpty() || (ch==']' && st.peek()!='[')){
                return false;
            }
            else{
                st.pop();
            }
        }
        if(st.isEmpty()){
            return true;
        }
        return false;
    }
}
