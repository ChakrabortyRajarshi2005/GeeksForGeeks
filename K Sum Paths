K Sum Paths
Difficulty: MediumAccuracy: 44.73%Submissions: 117K+Points: 4
Given a binary tree and an integer k, determine the number of downward-only paths where the sum of the node values in the path equals k. A path can start and end at any node within the tree but must always move downward (from parent to child).

Examples:

Input: k = 7   

Output: 3
Explanation: The following paths sum to k 
 
Input: k = 3

Output: 2
Explanation:
Path 1 : 1 -> 2 (Sum = 3)
Path 2 : 3 (Sum = 3)


Constraints:

1 ≤ number of nodes ≤ 104
-100 ≤ node value ≤ 100
-109 ≤ k ≤ 109

class Solution {
    unordered_map<int,int> m;
    int count = 0;
    
    void countPaths(Node *node, int k, int currSum){
        if(!node) return;
        
        currSum += node->data;
        if(m.count(currSum - k))
            count += m[currSum-k];
        m[currSum]++;
        countPaths(node->left, k, currSum);
        countPaths(node->right, k, currSum);
        m[currSum]--;
    }
    
    
  public:
    int sumK(Node *root, int k) {
        // code here
        m[0] = 1;
        countPaths(root, k, 0);
        return count;
    }
};
