Indexes of Subarray Sum
Difficulty: MediumAccuracy: 16.5%Submissions: 1.7MPoints: 4
Given an unsorted array arr containing only non-negative integers, your task is to find a continuous subarray (a contiguous sequence of elements) whose sum equals a specified value target. You need to return the 1-based indices of the leftmost and rightmost elements of this subarray.

Examples:

Input: arr[] = [1,2,3,7,5], target = 12
Output: [2, 4]
Explanation: The sum of elements from 2nd to 4th position is 12.
Input: arr[] = [1,2,3,4,5,6,7,8,9,10], target = 15,
Output: [1, 5]
Explanation: The sum of elements from 1st to 5th position is 15.
Input: arr[] = [7,2,1], target = 2
Output: [2, 2]
Explanation: The sum of elements from 2nd to 2nd position is 2.
Input: arr[] = [5,3,4], target = 2
Output: [-1]
Explanation: There is no subarray with sum 2.
Constraints:
1 <= arr.size()<= 106
0 <= arr[i] <= 103
0 <= target <= 109


Code :
class Solution {
    static ArrayList<Integer> subarraySum(int[] arr, int target) {
        int n = arr.length; // Get the size of the array
        int start = 0;
        int currsum = 0;
        ArrayList<Integer> res = new ArrayList<>();

        
        for (int i = 0; i < n; i++) {
            currsum += arr[i];

            while (currsum >= target) {
               
                if (currsum == target) {
                    res.add(start + 1); 
                    res.add(i + 1);    
                    return res;         
                }
                
                currsum -= arr[start];
                start++;
            }
        }
       
        res.add(-1);
   
        return res;
    }
}
