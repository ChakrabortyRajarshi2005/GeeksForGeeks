Coin Change (Minimum Coins)
Difficulty: MediumAccuracy: 26.74%Submissions: 244K+Points: 4
You are given an array coins[], where each element represents a coin of a different denomination, and a target value sum. You have an unlimited supply of each coin type {coins1, coins2, ..., coinsm}.

Your task is to determine the minimum number of coins needed to obtain the target sum. If it is not possible to form the sum using the given coins, return -1.

Examples:

Input: coins[] = [25, 10, 5], sum = 30
Output: 2
Explanation: Minimum 2 coins needed, 25 and 5  
Input: coins[] = [9, 6, 5, 1], sum = 19
Output: 3
Explanation: 19 = 9 + 9 + 1
Input: coins[] = [5, 1], sum = 0
Output: 0
Explanation: For 0 sum, we do not need a coin
Input: coins[] = [4, 6, 2], sum = 5
Output: -1
Explanation: Not possible to make the given sum.
 
Constraints:
1 ≤ sum * coins.size() ≤ 106
0 <= sum <= 104
1 <= coins[i] <= 104
1 <= coins.size() <= 103
Company Tags
PaytmMorgan StanleyAccoliteAmazonMicrosoftSamsungSnapdealOracleVisaGoogleSynopsys
Topic Tags
Related Interview Experiences
// C++ program to find minimum of coins
// to make a given change sum
#include<bits/stdc++.h>
using namespace std;

int minCoins(vector<int> &coins, int sum) {
    vector<vector<int>> dp(coins.size(), vector<int>(sum+1, 0));
    
    for (int i=coins.size()-1; i>=0; i--) {
        for (int j=1; j<=sum; j++) {
            dp[i][j] = INT_MAX;
            int take = INT_MAX, noTake = INT_MAX;
            
            // If we take coins[i] coin
            if (j-coins[i]>=0) {
                take = dp[i][j-coins[i]];
                if (take != INT_MAX) take++;
            }
            
            if (i+1<coins.size())
            // not take the coin 
                noTake = dp[i+1][j];
            
            dp[i][j] = min(take, noTake);
        }
    }
    
    if (dp[0][sum]!=INT_MAX) return dp[0][sum];
    return -1;
}

int main() {
    vector<int> coins =  {9, 6, 5, 1};
    int sum = 19;
    cout << minCoins(coins, sum);
    return 0;
}


class Solution {
    
    int solve(int i,int sum,vector<int>&coins,vector<vector<int>>&dp) {
        if(sum==0) return 0;
        if(i<0) return 1e9;
        if(dp[i][sum] != -1) return dp[i][sum];
        
        int take=1e9;
        if(sum >= coins[i]) take=1+solve(i,sum-coins[i],coins,dp);
        
        int nottake=solve(i-1,sum,coins,dp);
        return dp[i][sum]=min(take,nottake);
     }
    
  public:
    int minCoins(vector<int> &coins, int sum) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        int ans=solve(n-1,sum,coins,dp);
        
        return ans==1e9?-1:ans;
    }
};
