B. Taxi
time limit per test3 seconds
memory limit per test256 megabytes
After the lessons n groups of schoolchildren went outside and decided to visit Polycarpus to celebrate his birthday. We know that the i-th group consists of si friends (1 ≤ si ≤ 4), and they want to go to Polycarpus together. They decided to get there by taxi. Each car can carry at most four passengers. What minimum number of cars will the children need if all members of each group should ride in the same taxi (but one taxi can take more than one group)?

Input
The first line contains integer n (1 ≤ n ≤ 105) — the number of groups of schoolchildren. The second line contains a sequence of integers s1, s2, ..., sn (1 ≤ si ≤ 4). The integers are separated by a space, si is the number of children in the i-th group.

Output
Print the single number — the minimum number of taxis necessary to drive all children to Polycarpus.

Examples
InputCopy
5
1 2 4 3 3
OutputCopy
4
InputCopy
8
2 3 4 4 2 1 3 1
OutputCopy
5
Note
In the first test we can sort the children into four cars like this:

the third group (consisting of four children),
the fourth group (consisting of three children),
the fifth group (consisting of three children),
the first and the second group (consisting of one and two children, correspondingly).
There are other ways to sort the groups into four cars.

import java.util.*;

public class Taxi {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input number of groups
        int n = scanner.nextInt();

        // Array to count groups of each size
        int[] groupCount = new int[5];

        // Read group sizes and count them
        for (int i = 0; i < n; i++) {
            int size = scanner.nextInt();
            groupCount[size]++;
        }

        // Calculate the minimum number of taxis
        int taxis = 0;

        // Groups of size 4 each need one taxi
        taxis += groupCount[4];

        // Pair groups of size 3 with groups of size 1
        int minPairs = Math.min(groupCount[3], groupCount[1]);
        taxis += minPairs;
        groupCount[3] -= minPairs;
        groupCount[1] -= minPairs;

        // Remaining groups of size 3 each need one taxi
        taxis += groupCount[3];

        // Groups of size 2 can share taxis (two groups of 2 per taxi)
        taxis += groupCount[2] / 2;
        if (groupCount[2] % 2 == 1) { // If there is one group of size 2 left
            taxis += 1;
            groupCount[1] -= Math.min(2, groupCount[1]); // Pair it with up to two groups of size 1
        }

        // Remaining groups of size 1 need taxis (4 per taxi)
        if (groupCount[1] > 0) {
            taxis += (groupCount[1] + 3) / 4;
        }

        // Output the result
        System.out.println(taxis);
    }
}
