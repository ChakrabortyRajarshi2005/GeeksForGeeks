Multiplexer
You are given an array 
A
A of length 
N
N and a positive integer 
X
X. You are allowed to perform the following operation at most once:

Choose any contiguous subarray of 
A
A and multiply each element of the subarray by 
X
X.
Your task is to determine the maximum possible frequency of any element in the array after performing the operation at most once. The frequency of an element is defined as the number of times it appears in the array.

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains two space-separated integers 
N
N and 
X
X — the length of array and the multiplier, respectively.
The next line contains 
N
N space-separated integers 
A
1
,
A
2
,
.
.
.
,
A
N
A 
1
​
 ,A 
2
​
 ,...,A 
N
​
  — the elements of the array.
Output Format
For each test case, output a single line containing one integer — the maximum frequency of any element that can be achieved after performing the operation at most once.

Constraints
1
≤
T
≤
1
0
4
1≤T≤10 
4
 
1
≤
N
≤
2
⋅
1
0
5
1≤N≤2⋅10 
5
 
1
≤
X
,
A
i
≤
1
0
9
1≤X,A 
i
​
 ≤10 
9
 
The sum of 
N
N over all test cases won't exceed 
2
⋅
1
0
5
2⋅10 
5
 .
Sample 1:
Input
Output
4
2 1
1 6
5 5
10 2 8 2 4
4 3
6 2 6 2
5 2
5 3 2 5 4
1
3
3
2
Explanation:
Test Case 1: Multiplying any subarray by 
X
=
1
X=1 leaves the array unchanged. Therefore, no operation is needed, and the maximum frequency remains 
1
1.

Test Case 2: 
[
10
,
2
,
8
,
2
,
4
]
→
Choose Substring from 
l
=
2
 to 
r
=
5
[
10
,
10
,
40
,
10
,
20
]
[10,2,8,2,4] 
Choose Substring from l=2 to r=5
​
 [10,10,40,10,20]. It can be shown that there is no way to achieve a maximum frequency greater than 
3
3.

Test Case 3: 
[
6
,
2
,
6
,
2
]
→
Choose Substring from 
l
=
2
 to 
r
=
4
[
6
,
6
,
18
,
6
]
[6,2,6,2] 
Choose Substring from l=2 to r=4
​
 [6,6,18,6]. It can be shown that there is no way to achieve a maximum frequency greater than 
3
3.

Test Case 4: 
[
5
,
3
,
2
,
5
,
4
]
→
Choose Substring from 
l
=
3
 to 
r
=
3
[
5
,
3
,
4
,
5
,
4
]
[5,3,2,5,4] 
Choose Substring from l=3 to r=3
​
 [5,3,4,5,4]. The frequency of both 
5
5 and 
4
4 is 
2
2, and it can be shown that no operation can yield a maximum frequency greater than 
2
2
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
using namespace std;
#define ll long long

void solve(){
    ll n, x;
    cin >> n >> x;
    vector<ll> A(n);
    for(ll i = 0; i < n; i++){
        cin >> A[i];
    }
    
    unordered_map<ll, ll> freq;
    unordered_map<ll, vector<ll>> pos;
    for(ll i = 0; i < n; i++){
        freq[A[i]]++;
        pos[A[i]].push_back(i);
    }
    
    ll ans = 0;
    for(auto &p : freq){
        ans = max(ans, p.second);
    }
    
    if(x == 1){
        cout << ans << "\n";
        return;
    }
    
    for(auto &entry : pos){
        ll tar = entry.first;
        ll candidate = tar * x;
        
        vector<ll> mergedIndices;
        vector<int> contributions;
        
        vector<ll> posTar = pos[tar];
        sort(posTar.begin(), posTar.end());
        
        vector<ll> posCand;
        if(pos.find(candidate) != pos.end()){
            posCand = pos[candidate];
            sort(posCand.begin(), posCand.end());
        }
        
        ll i = 0, j = 0;
        while(i < posTar.size() || j < posCand.size()){
            if(j == posCand.size() || (i < posTar.size() && posTar[i] < posCand[j])){
                mergedIndices.push_back(posTar[i]);
                contributions.push_back(1); 
                i++;
            } else {
                mergedIndices.push_back(posCand[j]);
                contributions.push_back(-1);
                j++;
            }
        }
        
        ll best_gain = 0, current = 0;
        for(auto val : contributions){
            current += val;
            if(current < 0) current = 0;
            best_gain = max(best_gain, current);
        }
        
        ll candidateFreq = (freq.find(candidate) != freq.end() ? freq[candidate] : 0) + best_gain;
        ans = max(ans, candidateFreq);
    }
    
    cout << ans << "\n";
}
  
int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int t;
    cin >> t;
    while(t--){
        solve();
    }
    return 0;
}
