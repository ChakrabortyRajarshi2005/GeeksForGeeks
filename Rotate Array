Rotate Array
Difficulty: MediumAccuracy: 37.06%Submissions: 380K+Points: 4
Given an unsorted array arr[]. Rotate the array to the left (counter-clockwise direction) by d steps, where d is a positive integer. Do the mentioned change in the array in place.

Note: Consider the array as circular.

Examples :

Input: arr[] = [1, 2, 3, 4, 5], d = 2
Output: [3, 4, 5, 1, 2]
Explanation: when rotated by 2 elements, it becomes 3 4 5 1 2.
Input: arr[] = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], d = 3
Output: [8, 10, 12, 14, 16, 18, 20, 2, 4, 6]
Explanation: when rotated by 3 elements, it becomes 8 10 12 14 16 18 20 2 4 6.
Input: arr[] = [7, 3, 9, 1], d = 9
Output: [3, 9, 1, 7]
Explanation: when we rotate 9 times, we'll get 3 9 1 7 as resultant array.
Constraints:
1 <= arr.size(), d <= 105
0 <= arr[i] <= 105
// Brute Force
// class Solution {
//     static void rotateArr(int arr[], int d) {
//         int n = arr.length;
//         int brr [] = new int [d];
//         int crr [] = new int [n-d];
//         int rotate_arr [] = new int [n];
        
//         int j=d-1,k=n-1,l=0,m=arr.length-1;
//         for(int i=0;i<d;i++){
//             brr[i] = arr[j];
//             j--;
//         }
//         for(int i=0;i<n-d;i++){
//             crr[i] = arr[k];
//             k--;
//         }
//         System.arraycopy(rotate_arr,0,brr,0,brr.length);
//         System.arraycopy(rotate_arr,d,crr,0,crr.length);
//         while(l<m){
//             int temp = rotate_arr[l];
//             rotate_arr[l] = rotate_arr[m];
//             rotate_arr[m] = temp;
//         }
        
//     }
// }

Optimized :
class Solution {
    static void rotateArr(int arr[], int d) {
        int n = arr.length;
        d = d % n;
        reverse(arr, 0, d - 1);
        reverse(arr, d, n - 1);
        reverse(arr, 0, n - 1);
    }
    static void reverse(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}
