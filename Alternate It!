Alternate It!
Given a binary string 
S
S.
You can perform a series of operations on it any number of times:

Odd-numbered operations 
(
1
s
t
,
3
r
d
,
5
t
h
,
.
.
.
)
:
(1 
st
 ,3 
rd
 ,5 
th
 ,...): You can shuffle any (possibly empty) substring
†
†
  of 
S
S in any order.
Even-numbered operations 
(
2
n
d
,
4
t
h
,
6
t
h
,
.
.
.
)
(2 
nd
 ,4 
th
 ,6 
th
 ,...) : You can choose any (possibly empty) substring of 
S
S and flip every bit of it.
Flipping a character means turning it from 
0
0 to 
1
1 and vice versa.
Find the minimum number of operations to be performed to make the string alternating
‡
‡
 .

†
†
 A substring of a string is a contiguous sequence of characters within the string.

‡
‡
 A string is called alternating if no two adjacent characters are the same.

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of one line - the binary string 
S
S.
Output Format
For each test case, print a single integer on a new line — the minimum number of operations required to make 
S
S alternating.

Constraints
1
≤
T
≤
1
0
5
1≤T≤10 
5
 
1
≤
∣
S
∣
≤
1
0
5
1≤∣S∣≤10 
5
 
The sum of length of strings over all test cases won't exceed 
1
0
5
10 
5
 .
Sample 1:
Input
Output
3
110010
0101
010111
1
0
2
Explanation:
Test case 1: During the first operation, we can select the entire string as the substring and shuffle it to form 
010101
010101, which is already alternating.

Test case 2: The given string is already alternating, so no operations are needed.

Test case 3:

During the first operation, choose an empty substring (i.e., make no changes).
During the second operation, flip the 
1
1 at index 
4
4 (zero based indexing).
0101
1
‾
1
→
Flip Substring from l=4 to r=4 
0101
0
‾
1
0101 
1
​
 1 
Flip Substring from l=4 to r=4 
​
 0101 
0
​
 1.
It can be proven that the initial string cannot be made alternating in less than two operations.
import java.io.*;
import java.util.*;

class Codechef {
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }
    }


    public static void main(String[] args) throws IOException {
        FastReader in = new FastReader();
        PrintWriter out = new PrintWriter(System.out);

        int T = in.nextInt();
        while (T-- > 0) {
            String s = in.next();
            int n = s.length();
            boolean flag = true;
            int zeros=0, ones=0;
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) == '0') {
                    zeros++;
                } else {
                    ones++;
                }
                if (i < n - 1 && s.charAt(i) == s.charAt(i + 1))
                    flag = false;

            }
            int diff=Math.abs(zeros-ones);
            if (flag) {
                out.println("0");
            }
            else if(diff<=1) {
                out.println("1");
            } else {
                if(diff<=3)
                    out.println("2");
                else
                    out.println("3");
            }
        }

        out.flush();
        out.close();
    }
}
