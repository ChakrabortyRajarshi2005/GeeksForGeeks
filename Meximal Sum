Meximal Sum
You are given an integer array 
A
A containing 
N
N elements.

A pair 
(
L
,
R
)
(L,R),
(
1
≤
L
<
R
<
N
)
(1≤L<R<N) is called good pair if:

MEX 
(
A
[
1
,
⋯
L
]
)
(A[1,⋯L]) 
=
= MEX
(
A
[
L
+
1
⋯
R
]
)
(A[L+1⋯R]) 
=
= MEX
(
A
[
R
+
1
⋯
N
]
)
(A[R+1⋯N])
where MEX of an array denotes the minimal non-negative integer which is not present in that array.

Now Your task is to find both minimum and maximum value of SUM
(
A
[
1
⋯
L
]
)
(A[1⋯L]) 
−
− SUM
(
A
[
L
+
1
⋯
R
]
)
(A[L+1⋯R]) 
+
+ SUM
(
A
[
R
+
1
⋯
N
]
)
(A[R+1⋯N]) for any good pair 
L
L and 
R
R.

SUM
A
(
[
X
,
Y
]
)
A([X,Y]) denotes 
A
X
+
A
X
+
1
+
.
.
.
+
A
Y
A 
X
​
 +A 
X+1
​
 +...+A 
Y
​
 .

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains 
N
N - the size of the array.
The second line of each test case contains 
N
N integers - 
A
1
,
A
2
,
.
.
.
,
A
N
A 
1
​
 ,A 
2
​
 ,...,A 
N
​
 .
Output Format
For each test case, print the minimum and maximum value of the expression : SUM
(
A
[
1
⋯
L
]
)
(A[1⋯L]) 
−
− SUM
(
A
[
L
+
1
⋯
R
]
)
(A[L+1⋯R]) 
+
+ SUM
(
A
[
R
+
1
⋯
N
]
)
(A[R+1⋯N]) for any good pair 
L
L and 
R
R.

If no good pair exists, print 
−
1
−
1
−1−1.

Constraints
1
≤
T
≤
1
0
4
1≤T≤10 
4
 
3
≤
N
≤
2
⋅
1
0
5
3≤N≤2⋅10 
5
 
0
≤
A
i
≤
1
0
9
0≤A 
i
​
 ≤10 
9
 
The sum of 
N
N over all test cases does not exceed 
2
⋅
1
0
5
2⋅10 
5
 .
Sample 1:
Input
Output
5
3
2 4 3
5
0 9 2 0 1
5
2 3 1 5 3
6
0 1 0 1 0 1
8
0 1 0 1 0 1 0 1
1 1
-1 -1
-4 12
1 1
0 2
Explanation:
Test case 1 : There is only one good pair 
L
=
1
,
R
=
2
L=1,R=2, and MEX of the 
3
3 parts of the array are all 
0
0. For this pair, the value is 
2
−
4
+
3
=
1
2−4+3=1. This is both the minimum and maximum.

Test Case 2 : It can be proven that there is no good pair in this case.
#include <bits/stdc++.h>
using namespace std;

void solve() {
    int n;
    std::cin >> n;
    std::vector<int> a(n);
    for (int i = 0; i < n; ++i) std::cin >> a[i];
    int mex = [&]() {
        int cur_mex = 0;
        std::set<int> seen;
        for (int x : a) {
            seen.insert(x);
            while (seen.contains(cur_mex)) ++cur_mex;
        }
        return cur_mex;
    }();
    int shortest_prefix = [&]() {
        int cur_mex = 0;
        std::set<int> seen;
        for (int i = 0; i < n; ++i) {
            seen.insert(a[i]);
            while(seen.contains(cur_mex)) ++cur_mex;
            if (cur_mex == mex) return i;
        }
        return -1;
    }();
    int shortest_suffix = [&]() {
        int cur_mex = 0;
        std::set<int> seen;
        for (int i = n - 1; i >= 0; --i) {
            seen.insert(a[i]);
            while(seen.contains(cur_mex)) ++cur_mex;
            if (cur_mex == mex) return i;
        }
        return -1;
    }();
    
    auto has_said_mex = [&](int l, int r, int target_mex) {
        if (l > r) return false;
        int cur_mex = 0;
        std::set<int> seen;
        for (int i = l; i <= r; ++i) {
            seen.insert(a[i]);
            while(seen.contains(cur_mex)) ++cur_mex;
        }
        return cur_mex == target_mex;
    };
    
    if (shortest_prefix == -1 || shortest_suffix == -1 || !has_said_mex(shortest_prefix + 1, shortest_suffix - 1, mex)) {
        std::cout << "-1 -1\n";
        return;
    }
    std::cerr << shortest_prefix << " " << shortest_suffix << "\n";
    long long min_sum = 0;
    for (int i = 0; i < n; ++i) {
        if (i <= shortest_prefix) min_sum += a[i];
        else if (i >= shortest_suffix) min_sum += a[i];
        else min_sum -= a[i];
    }
    std::cout << min_sum << " ";
    auto smallest_sum_with_mex = [&](int l, int r, int target_mex) {
        long long smalles_sum = 1e18, window_sum = 0, cur_mex = 0;
        std::unordered_map<int, int> freq;
        int tail = l;
        for (int i = l; i <= r; ++i) {
            freq[a[i]]++;
            window_sum += a[i];
            while (freq[cur_mex] > 0) ++cur_mex;
            while (cur_mex == target_mex) {
                smalles_sum = std::min(smalles_sum, window_sum);
                if (tail == i) break;
                if (a[tail] > cur_mex) {
                    window_sum -= a[tail];
                    freq[a[tail]]--;
                    tail++;
                } else if (freq[a[tail]] > 1) {
                    window_sum -= a[tail];
                    freq[a[tail]]--;
                    tail++;
                } else break;
            }
        }
        return smalles_sum;
    }(shortest_prefix + 1, shortest_suffix - 1, mex);
    std::cout << std::accumulate(a.begin(), a.end(), 0LL) - 2 * smallest_sum_with_mex << '\n';
}

int main() {
	int t;
	std::cin >> t;
	while (t--) solve();

}
