Non-overlapping Intervals
Difficulty: MediumAccuracy: 51.92%Submissions: 24K+Points: 4
Given a 2D array intervals[][] of representing intervals where intervals [i] = [starti, endi ]. Return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Examples:

Input: intervals[][] = [[1, 2], [2, 3], [3, 4], [1, 3]]
Output: 1
Explanation: [1, 3] can be removed and the rest of the intervals are non-overlapping.
Input: intervals[][] = [[1, 3], [1, 3], [1, 3]]
Output: 2
Explanation: You need to remove two [1, 3] to make the rest of the intervals non-overlapping.
Input: intervals[][] = [[1, 2], [5, 10], [18, 35], [40, 45]]
Output: 0
Explanation: All ranges are already non overlapping.
Constraints:
1 ≤ intervals.size() ≤  105
|intervalsi| == 2
0 ≤ starti < endi <=5*104


class Solution {
    static int minRemoval(int intervals[][]) {
        int N = intervals.length;
        if (intervals == null || intervals.length == 0) return 0;

        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        int previousEnd = intervals[0][1];
        int counter = 0;

        for (int i = 1; i < intervals.length; i++) {
            if (previousEnd > intervals[i][0]) {
                counter++;
                previousEnd = Math.min(intervals[i][1], previousEnd);
            } else {
                previousEnd = intervals[i][1];
            }
        }

        return counter;
    }
}
