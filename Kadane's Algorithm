Kadane's Algorithm
Difficulty: MediumAccuracy: 36.28%Submissions: 1MPoints: 4
Given an integer array arr[]. You need to find the maximum sum of a subarray.

Examples:

Input: arr[] = [2, 3, -8, 7, -1, 2, 3]
Output: 11
Explanation: The subarray {7, -1, 2, 3} has the largest sum 11.
Input: arr[] = [-2, -4]
Output: -2
Explanation: The subarray {-2} has the largest sum -2.
Input: arr[] = [5, 4, 1, 7, 8]
Output: 25
Explanation: The subarray {5, 4, 1, 7, 8} has the largest sum 25.
Constraints:
1 ≤ arr.size() ≤ 105
-109 ≤ arr[i] ≤ 104


class Solution {
    int maxSubarraySum(int[] arr) {
        int n = arr.length;
        int max_h = 0, max_f = arr[0];
        for (int i = 0; i < n; i++) {
            max_h += arr[i];
            if (max_f < max_h) {
                max_f = max_h;
            }
            if (max_h < 0) {
                max_h = 0;
            }
        }
        return max_f;
    }
}
