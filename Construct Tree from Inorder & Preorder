Construct Tree from Inorder & Preorder
Difficulty: MediumAccuracy: 34.59%Submissions: 193K+Points: 4Average Time: 20m
Given two arrays representing the inorder and preorder traversals of a binary tree, construct the tree and return the root node of the constructed tree.

Note: The output is written in postorder traversal.

Examples:

Input: inorder[] = [1, 6, 8, 7], preorder[] = [1, 6, 7, 8]
Output: [8, 7, 6, 1]
Explanation: The tree will look like

Input: inorder[] = [3, 1, 4, 0, 2, 5], preorder[] = [0, 1, 3, 4, 2, 5]
Output: [3, 4, 1, 5, 2, 0]
Explanation: The tree will look like

Input: inorder[] = [2, 5, 4, 1, 3], preorder[] = [1, 4, 5, 2, 3]
Output: [2, 5, 4, 3, 1]
Explanation: The tree will look like

Constraints:
1 ≤ number of nodes ≤ 103
0 ≤ nodes -> data ≤ 103
Both the inorder and preorder arrays contain unique values.


class Solution {
  public:
    Node *buildTreeRecur(unordered_map<int, int> &mp, vector<int> &preorder,
                         int &preIndex, int left, int right) {
        if (left > right)
            return nullptr;

        int rootVal = preorder[preIndex];
        preIndex++;

        Node *root = new Node(rootVal);
        int index = mp[rootVal];

        root->left = buildTreeRecur(mp, preorder, preIndex, left, index - 1);
        root->right = buildTreeRecur(mp, preorder, preIndex, index + 1, right);

        return root;
    }

    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        unordered_map<int, int> mp;
        for (int i = 0; i < inorder.size(); i++)
            mp[inorder[i]] = i;

        int preIndex = 0;
        return buildTreeRecur(mp, preorder, preIndex, 0, inorder.size() - 1);
    }
};
