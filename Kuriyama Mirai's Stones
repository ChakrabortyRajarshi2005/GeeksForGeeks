Kuriyama Mirai's Stones
time limit per test2 seconds
memory limit per test256 megabytes
Kuriyama Mirai has killed many monsters and got many (namely n) stones. She numbers the stones from 1 to n. The cost of the i-th stone is vi. Kuriyama Mirai wants to know something about these stones so she will ask you two kinds of questions:

She will tell you two numbers, l and r (1 ≤ l ≤ r ≤ n), and you should tell her .
Let ui be the cost of the i-th cheapest stone (the cost that will be on the i-th place if we arrange all the stone costs in non-decreasing order). This time she will tell you two numbers, l and r (1 ≤ l ≤ r ≤ n), and you should tell her .
For every question you should give the correct answer, or Kuriyama Mirai will say "fuyukai desu" and then become unhappy.

Input
The first line contains an integer n (1 ≤ n ≤ 105). The second line contains n integers: v1, v2, ..., vn (1 ≤ vi ≤ 109) — costs of the stones.

The third line contains an integer m (1 ≤ m ≤ 105) — the number of Kuriyama Mirai's questions. Then follow m lines, each line contains three integers type, l and r (1 ≤ l ≤ r ≤ n; 1 ≤ type ≤ 2), describing a question. If type equal to 1, then you should output the answer for the first question, else you should output the answer for the second one.

Output
Print m lines. Each line must contain an integer — the answer to Kuriyama Mirai's question. Print the answers to the questions in the order of input.

Examples
InputCopy
6
6 4 2 7 2 7
3
2 3 6
1 3 4
1 1 6
OutputCopy
24
9
28
InputCopy
4
5 5 2 3
10
1 2 4
2 1 4
1 1 1
2 1 4
2 1 2
1 1 1
1 3 3
1 1 3
1 4 4
1 2 2
OutputCopy
10
15
5
15
5
5
2
12
3
5
Note
Please note that the answers to the questions may overflow 32-bit integer type.

import java.util.*;
import java.io.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(System.out);
        
        // Read n
        int n = Integer.parseInt(br.readLine());
        
        // Read array v
        String[] tokens = br.readLine().split(" ");
        long[] v = new long[n + 1];  // 1-based indexing
        for (int i = 1; i <= n; i++) {
            v[i] = Long.parseLong(tokens[i-1]);
        }
        
        // Create prefix sums for original array
        long[] prefixSum = new long[n + 1];
        for (int i = 1; i <= n; i++) {
            prefixSum[i] = prefixSum[i-1] + v[i];
        }
        
        // Create sorted array and its prefix sums
        long[] sorted = new long[n + 1];
        System.arraycopy(v, 1, sorted, 1, n);
        Arrays.sort(sorted, 1, n + 1);
        long[] sortedPrefixSum = new long[n + 1];
        for (int i = 1; i <= n; i++) {
            sortedPrefixSum[i] = sortedPrefixSum[i-1] + sorted[i];
        }
        
        // Process queries
        int m = Integer.parseInt(br.readLine());
        for (int i = 0; i < m; i++) {
            tokens = br.readLine().split(" ");
            int type = Integer.parseInt(tokens[0]);
            int l = Integer.parseInt(tokens[1]);
            int r = Integer.parseInt(tokens[2]);
            
            if (type == 1) {
                // Sum of original array from l to r
                long ans = prefixSum[r] - prefixSum[l-1];
                pw.println(ans);
            } else {
                // Sum of sorted array from l to r
                long ans = sortedPrefixSum[r] - sortedPrefixSum[l-1];
                pw.println(ans);
            }
        }
        
        pw.flush();
        pw.close();
    }
}
